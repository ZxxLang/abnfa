// Generated by abnfa/lib/coder-js
module.exports = {
  "mode": "string",
  "typefield": "type",
  "locfield": "loc",
  "crlf": "",
  "indent": "",
  "infix": null,
  "nullable": null,
  "custom": {
    "language": "ABNFA",
    "fileTypes": [
      "abnf"
    ],
    "scopeName": "source.abnf",
    "description": "ABNFA to AST"
  },
  "typenames": [
    "meta",
    "stringList",
    "type",
    "field",
    "infix",
    "repeat",
    "list",
    "codes",
    "bits",
    "string",
    "action",
    "index",
    "comment"
  ],
  "types": [
    {
      "kind": "struct",
      "fields": {
        "mode": {
          "kind": "STRING",
          "value": "string",
          "annotation": null
        },
        "typefield": {
          "kind": "STRING",
          "value": "type",
          "annotation": null
        },
        "locfield": {
          "kind": "STRING",
          "value": "loc",
          "annotation": null
        },
        "crlf": {
          "kind": "STRING",
          "value": "",
          "annotation": null
        },
        "indent": {
          "kind": "STRING",
          "value": "",
          "annotation": null
        },
        "infix": {
          "kind": "",
          "value": "",
          "annotation": [
            4
          ]
        },
        "nullable": {
          "kind": "UNIQUE",
          "value": "",
          "annotation": [
            "STRING"
          ]
        },
        "custom": {
          "kind": "OBJECT",
          "value": "",
          "annotation": [
            "BOOL",
            "STRING",
            1
          ]
        },
        "typenames": {
          "kind": "UNIQUE",
          "value": "",
          "annotation": [
            "STRING"
          ]
        },
        "types": {
          "kind": "ARRAY",
          "value": "",
          "annotation": [
            2
          ]
        },
        "formnames": {
          "kind": "UNIQUE",
          "value": "",
          "annotation": [
            "STRING"
          ]
        },
        "formulas": {
          "kind": "ARRAY",
          "value": "",
          "annotation": [
            6,
            10,
            9,
            7,
            8,
            11
          ]
        },
        "comments": {
          "kind": "ARRAY",
          "value": "",
          "annotation": [
            12
          ]
        }
      }
    },
    {
      "kind": "ARRAY",
      "annotation": [
        "STRING"
      ]
    },
    {
      "kind": "struct",
      "fields": {
        "kind": {
          "kind": "STRING",
          "value": "",
          "annotation": null
        },
        "fields": {
          "kind": "OBJECT",
          "value": "",
          "annotation": [
            3
          ]
        },
        "annotation": {
          "kind": "ARRAY",
          "value": "",
          "annotation": [
            "STRING",
            "INT"
          ]
        }
      }
    },
    {
      "kind": "struct",
      "fields": {
        "kind": {
          "kind": "STRING",
          "value": "",
          "annotation": null
        },
        "value": {
          "kind": "",
          "value": "",
          "annotation": [
            "INT",
            "STRING",
            "BOOL"
          ]
        },
        "annotation": {
          "kind": "ARRAY",
          "value": "",
          "annotation": [
            "STRING",
            "INT"
          ]
        }
      }
    },
    {
      "kind": "struct",
      "fields": {
        "node": {
          "kind": "STRING",
          "value": "",
          "annotation": null
        },
        "left": {
          "kind": "STRING",
          "value": "",
          "annotation": null
        },
        "operator": {
          "kind": "STRING",
          "value": "",
          "annotation": null
        },
        "right": {
          "kind": "STRING",
          "value": "",
          "annotation": null
        },
        "priority": {
          "kind": "ARRAY",
          "value": "",
          "annotation": [
            1
          ]
        }
      }
    },
    {
      "kind": "struct",
      "fields": {
        "min": {
          "kind": "INT",
          "value": "1",
          "annotation": null
        },
        "max": {
          "kind": "INT",
          "value": "1",
          "annotation": null
        }
      }
    },
    {
      "kind": "struct",
      "fields": {
        "min": {
          "kind": "INT",
          "value": "1",
          "annotation": null
        },
        "max": {
          "kind": "INT",
          "value": "1",
          "annotation": null
        },
        "choice": {
          "kind": "BOOL",
          "value": "false",
          "annotation": null
        },
        "factor": {
          "kind": "ARRAY",
          "value": "",
          "annotation": [
            6,
            10,
            9,
            7,
            8,
            11
          ]
        }
      }
    },
    {
      "kind": "struct",
      "fields": {
        "min": {
          "kind": "INT",
          "value": "1",
          "annotation": null
        },
        "max": {
          "kind": "INT",
          "value": "1",
          "annotation": null
        },
        "value": {
          "kind": "ARRAY",
          "value": "",
          "annotation": [
            "RUNE"
          ]
        },
        "isRange": {
          "kind": "BOOL",
          "value": "false",
          "annotation": null
        }
      }
    },
    {
      "kind": "struct",
      "fields": {
        "min": {
          "kind": "INT",
          "value": "1",
          "annotation": null
        },
        "max": {
          "kind": "INT",
          "value": "1",
          "annotation": null
        },
        "value": {
          "kind": "STRING",
          "value": "",
          "annotation": null
        }
      }
    },
    {
      "kind": "struct",
      "fields": {
        "min": {
          "kind": "INT",
          "value": "1",
          "annotation": null
        },
        "max": {
          "kind": "INT",
          "value": "1",
          "annotation": null
        },
        "value": {
          "kind": "STRING",
          "value": "",
          "annotation": null
        },
        "sensitive": {
          "kind": "BOOL",
          "value": "true",
          "annotation": null
        }
      }
    },
    {
      "kind": "struct",
      "fields": {
        "min": {
          "kind": "INT",
          "value": "1",
          "annotation": null
        },
        "max": {
          "kind": "INT",
          "value": "1",
          "annotation": null
        },
        "refer": {
          "kind": "STRING",
          "value": "",
          "annotation": null
        },
        "name": {
          "kind": "STRING",
          "value": "",
          "annotation": null
        },
        "factor": {
          "kind": "ARRAY",
          "value": "",
          "annotation": [
            "STRING",
            "INT"
          ]
        }
      }
    },
    {
      "kind": "struct",
      "fields": {
        "min": {
          "kind": "INT",
          "value": "1",
          "annotation": null
        },
        "max": {
          "kind": "INT",
          "value": "1",
          "annotation": null
        },
        "refer": {
          "kind": "INT",
          "value": "0",
          "annotation": null
        },
        "action": {
          "kind": "INT",
          "value": "0",
          "annotation": null
        }
      }
    },
    {
      "kind": "struct",
      "fields": {
        "value": {
          "kind": "STRING",
          "value": "",
          "annotation": null
        }
      }
    }
  ],
  "formnames": [
    "result",
    "text",
    "meta",
    "custom",
    "or",
    "strings",
    "string",
    "quotes-vchar",
    "infix",
    "priority",
    "infixes",
    "type-declare",
    "field-declare",
    "type-annotation",
    "field-annotation",
    "type-kinds",
    "field-kinds",
    "mixins",
    "annotation",
    "rulename",
    "defined-as",
    "c-wsp",
    "c-nl",
    "comment",
    "comment-val",
    "rulelist",
    "rule",
    "alternation",
    "concatenation",
    "repetition",
    "repeat",
    "element",
    "option",
    "group",
    "action",
    "argument",
    "number-val",
    "safe-vchar",
    "char-val",
    "ex22",
    "ex27",
    "num-val",
    "hex-val",
    "ALPHA",
    "BIT",
    "DIGIT",
    "HEXDIG",
    "SP",
    "WSP",
    "VCHAR",
    "refer--meta()",
    "refer--comment(\"/comments\")",
    "to--eol()",
    "to--STRING(\"mode\")",
    "to--STRING(\"mode\",\"byte\")",
    "to--STRING(\"mode\",\"bits\")",
    "to--fault(\"Unsupported %s mode\")",
    "refer--STRING(\"crlf\",\"unescape\")",
    "refer--STRING(\"indent\",\"unescape\")",
    "refer--STRING(\"locfield\")",
    "refer--STRING(\"typefield\")",
    "refer--infix(\"infix\")",
    "refer--OBJECT(\"custom\")",
    "to--fault(\"Illegal configuration %q\",-3)",
    "refer--STRING(\"typenames\")",
    "refer--type(\"types\")",
    "to--fault(\"Illegal type annotation %q\",\"typenames\")",
    "refer--STRING(\"key\")",
    "to--true(\"val\")",
    "to--false(\"val\")",
    "refer--stringList(\"val\")",
    "to--fault(\"Invalid custom configuration %q\",\"key\")",
    "refer--STRING(\"val\",\"unescape\")",
    "refer--STRING(\"node\")",
    "refer--STRING(\"left\")",
    "refer--STRING(\"operator\")",
    "refer--STRING(\"right\")",
    "refer--ARRAY(\"priority\")",
    "refer--stringList()",
    "refer--OBJECT(\"fields\")",
    "to--STRING(\"kind\",\"struct\")",
    "refer--field(\"val\")",
    "to--fault(\"Invalid type-annotation: %s\",\"key\")",
    "refer--STRING(\"kind\")",
    "refer--ARRAY(\"annotation\")",
    "refer--STRING(\"value\")",
    "to--STRING(\"kind\",\"INT\")",
    "refer--STRING(\"value\",\"unescape\")",
    "to--STRING(\"kind\",\"STRING\")",
    "to--true(\"value\")",
    "to--STRING(\"kind\",\"BOOL\")",
    "to--false(\"value\")",
    "refer--STRING()",
    "refer--STRING(\"formnames\")",
    "refer--pending(\"formulas\")",
    "refer--pending(\"factor\")",
    "to--true(\"choice\")",
    "to--type(\"list\")",
    "to--discard()",
    "to--INT(\"min\",0)",
    "refer--INT(\"max\")",
    "to--INT(\"max\",1)",
    "refer--INT(\"min\")",
    "to--INT(\"max\",-1)",
    "to--copy(\"min\",\"max\")",
    "to--type(\"string\")",
    "to--type(\"action\")",
    "refer--STRING(\"refer\")",
    "refer--STRING(\"name\")",
    "to--fault(\"Invalid arguments of %s\",\"refer\")",
    "refer--STRING(\"factor\",\"unescape\")",
    "refer--STRING(\"factor\")",
    "to--fault(\"Invalid arguments on %s\",\"refer\")",
    "to--type(\"FLOAT\")",
    "to--type(\"INT\")",
    "to--false(\"sensitive\")",
    "to--type(\"codes\")",
    "to--type(\"bits\")",
    "to--fault(\"Unsupport num-val formula %q\",-1)",
    "refer--RUNE(\"value\",16)",
    "to--true(\"isRange\")"
  ],
  "formulas": null,
  "comments": []
};
let form = module.exports.formulas = [
  function (b) { // 0: result
    return b.Once(form[1],50);
  },
  function (b) { // 1: text
    return b.Once(function (b) {
    return b.Any(form[22],0) && b.EatString("ABNF-Actions",12) &&
    b.Once(form[20],0) && b.Once(form[2],0) &&
    b.Any(function (b) {
     return b.More(form[21],0) && b.Once(form[2],0);
    }, 0) &&
    b.More(function (b) {
     return b.Any(form[48],0) && b.Once(form[22],0);
    }, 0) &&
    b.Once(form[25],0) &&
    b.Any(function (b) {
     return (form[48](b) || b.Once(form[23],51) || form[52](b));
    }, 0);
  }, 0);
  },
  function (b) { // 2: meta
    return (b.Once(function (b) {
     return b.EatString("to-",3) &&
     (b.Once(function (b) {
       return b.EatString("mode",4) && b.More(form[48],0) &&
       (b.Once(function (b) {
         return b.EatString("string",6) && b.Pin(53);
        }, 0) ||
        b.Once(function (b) {
         return b.EatString("byte",4) && b.Pin(54);
        }, 0) ||
        b.Once(function (b) {
         return b.EatString("bits",4) && b.Pin(55);
        }, 0) ||
        form[56](b));
      }, 0) ||
      b.Once(function (b) {
       return b.EatString("crlf",4) && b.More(form[48],0) &&
       b.EatString("'",1) && b.Any(form[7],57) &&
       b.EatString("'",1);
      }, 0) ||
      b.Once(function (b) {
       return b.EatString("indent",6) && b.More(form[48],0) &&
       b.EatString("'",1) && b.Any(form[7],58) &&
       b.EatString("'",1);
      }, 0) ||
      b.Once(function (b) {
       return b.EatString("locfield",8) && b.More(form[48],0) &&
       b.EatString("'",1) && b.Any(form[43],59) &&
       b.EatString("'",1);
      }, 0) ||
      b.Once(function (b) {
       return b.EatString("typefield",9) && b.More(form[48],0) &&
       b.EatString("'",1) && b.Any(form[43],60) &&
       b.EatString("'",1);
      }, 0) ||
      b.Once(function (b) {
       return b.EatString("infix",5) && b.More(form[48],0) &&
       b.Once(form[8],61);
      }, 0) ||
      b.Once(form[3],62) || form[63](b));
    }, 0) ||
    b.Once(function (b) {
     return b.Once(form[19],64) && b.More(form[48],0) &&
     (b.Once(form[11],65) || form[66](b));
    }, 0));
  },
  function (b) { // 3: custom
    return b.Once(function (b) {
    return b.Once(form[19],67) && b.More(form[48],0) &&
    (b.Once(function (b) {
      return b.EatString("true",4) && b.Pin(68);
     }, 0) ||
     b.Once(function (b) {
      return b.EatString("false",5) && b.Pin(69);
     }, 0) ||
     b.Once(form[6],0) ||
     b.Once(function (b) {
      return b.EatString("[",1) && b.Any(form[48],0) &&
      b.Once(form[5],70) && b.Any(form[48],0) &&
      b.EatString("]",1);
     }, 0) ||
     form[71](b));
  }, 0);
  },
  function (b) { // 4: or
    return b.Once(function (b) {
    return b.More(form[21],0) && b.EatString("/",1) &&
    b.More(form[21],0);
  }, 0);
  },
  function (b) { // 5: strings
    return b.Once(function (b) {
    return b.Once(form[6],0) &&
    b.Any(function (b) {
     return b.Once(form[4],0) && b.Once(form[6],0);
    }, 0);
  }, 0);
  },
  function (b) { // 6: string
    return b.Once(function (b) {
    return b.EatString("'",1) && b.Any(form[7],72) &&
    b.EatString("'",1);
  }, 0);
  },
  function (b) { // 7: quotes-vchar
    return ((b.EatRangeChar(0x20,0x21) || b.EatRangeChar(0x23,0x26) ||
     b.EatString("(",1) || b.EatRangeChar(0x2a,0x5b) ||
     b.EatRangeChar(0x5d,0x7e)) ||
    b.Once(function (b) {
     return b.EatString("\\",1) &&
     (b.EatString("\"",1) || b.EatString("'",1) ||
      b.EatString("\\",1) ||
      b.Once(function (b) {
       return b.EatString("x",1) && b.Repeat(2,2,form[46],0);
      }, 0) ||
      b.Once(function (b) {
       return b.EatString("u",1) &&
       (b.Once(function (b) {
         return b.EatString("{",1) && b.Repeat(1,6,form[46],0) &&
         b.EatString("}",1);
        }, 0) ||
        b.Repeat(4,4,form[46],0));
      }, 0));
    }, 0));
  },
  function (b) { // 8: infix
    return b.Once(function (b) {
    return b.EatString("(",1) && b.Once(form[21],0) &&
    b.EatString("node",4) && b.More(form[48],0) &&
    b.EatString("'",1) && b.Once(form[19],73) &&
    b.EatString("'",1) && b.More(form[21],0) &&
    b.EatString("left",4) && b.More(form[48],0) &&
    b.EatString("'",1) && b.More(form[43],74) &&
    b.EatString("'",1) && b.More(form[21],0) &&
    b.EatString("operator",8) && b.More(form[48],0) &&
    b.EatString("'",1) && b.More(form[43],75) &&
    b.EatString("'",1) && b.More(form[21],0) &&
    b.EatString("right",5) && b.More(form[48],0) &&
    b.EatString("'",1) && b.More(form[43],76) &&
    b.EatString("'",1) && b.More(form[21],0) &&
    b.EatString("priority",8) && b.More(form[48],0) &&
    b.EatString("[",1) && b.Any(form[21],0) &&
    b.Once(form[9],77) && b.Any(form[21],0) &&
    b.EatString("]",1) && b.Once(form[21],0) &&
    b.EatString(")",1);
  }, 0);
  },
  function (b) { // 9: priority
    return b.Once(function (b) {
    return b.Once(form[10],78) &&
    b.Any(function (b) {
     return b.More(form[21],0) && b.Once(form[10],78);
    }, 0);
  }, 0);
  },
  function (b) { // 10: infixes
    return b.Once(function (b) {
    return b.EatString("[",1) && b.Any(form[21],0) && b.Once(form[5],0) &&
    b.Any(form[21],0) && b.EatString("]",1);
  }, 0);
  },
  function (b) { // 11: type-declare
    return (b.Once(function (b) {
     return b.EatString("(",1) &&
     b.More(function (b) {
      return b.More(form[21],0) && b.Once(form[12],79);
     }, 0) &&
     b.More(form[21],0) && b.EatString(")",1) && b.Pin(80);
    }, 0) ||
    b.Once(form[13],0));
  },
  function (b) { // 12: field-declare
    return b.Once(function (b) {
    return b.Once(form[19],67) && b.More(form[48],0) &&
    (b.Once(form[14],81) || form[82](b));
  }, 0);
  },
  function (b) { // 13: type-annotation
    return (b.Once(function (b) {
     return b.Once(form[15],83) && b.Once(form[18],84);
    }, 0) ||
    b.Once(form[18],84));
  },
  function (b) { // 14: field-annotation
    return (b.Once(function (b) {
     return b.EatString("%d",2) && b.More(form[45],85) && b.Pin(86);
    }, 0) ||
    b.Once(function (b) {
     return b.EatString("'",1) && b.Any(form[7],87) &&
     b.EatString("'",1) && b.Pin(88);
    }, 0) ||
    b.Once(function (b) {
     return b.EatString("true",4) && b.Pin(89) && b.Pin(90);
    }, 0) ||
    b.Once(function (b) {
     return b.EatString("false",5) && b.Pin(91) && b.Pin(90);
    }, 0) ||
    b.Once(form[17],83) || b.Once(form[13],0));
  },
  function (b) { // 15: type-kinds
    return (form[16](b) || b.EatString("interface",9));
  },
  function (b) { // 16: field-kinds
    return (b.EatString("ARRAY",5) || b.EatString("UNIQUE",6) ||
    b.EatString("OBJECT",6));
  },
  function (b) { // 17: mixins
    return b.EatString("mixins",6);
  },
  function (b) { // 18: annotation
    return b.Once(function (b) {
    return b.EatString("<",1) && b.Once(form[19],92) &&
    b.Any(function (b) {
     return b.EatString(",",1) && b.Option(form[47],0) &&
     b.Once(form[19],92);
    }, 0) &&
    b.EatString(">",1);
  }, 0);
  },
  function (b) { // 19: rulename
    return b.Once(function (b) {
    return form[43](b) &&
    b.Any(function (b) {
     return b.Option(function (b) {
      return b.EatString("-",1);
     }, 0) &&
     (form[43](b) || form[45](b));
    }, 0);
  }, 0);
  },
  function (b) { // 20: defined-as
    return b.Once(function (b) {
    return b.Any(form[21],0) && b.EatString("=",1) && b.Any(form[21],0);
  }, 0);
  },
  function (b) { // 21: c-wsp
    return (form[48](b) ||
    b.Once(function (b) {
     return b.Once(form[22],0) && form[48](b);
    }, 0));
  },
  function (b) { // 22: c-nl
    return b.Once(function (b) {
    return b.Option(form[23],51) && b.More(form[52],0);
  }, 0);
  },
  function (b) { // 23: comment
    return b.Once(function (b) {
    return b.EatString(";",1) && b.Any(form[24],85);
  }, 0);
  },
  function (b) { // 24: comment-val
    return (form[48](b) || form[49](b));
  },
  function (b) { // 25: rulelist
    return b.Once(function (b) {
    return b.Once(form[26],0) &&
    b.Any(function (b) {
     return b.Any(form[48],0) && b.Once(form[22],0) &&
     b.Option(form[26],0);
    }, 0);
  }, 0);
  },
  function (b) { // 26: rule
    return b.Once(function (b) {
    return b.Once(form[19],93) && b.Once(form[20],0) &&
    b.Once(form[27],94);
  }, 0);
  },
  function (b) { // 27: alternation
    return b.Once(function (b) {
    return b.Once(form[28],95) &&
    (b.Once(function (b) {
      return b.More(function (b) {
       return b.Once(form[4],0) && b.Once(form[28],95);
      }, 0) &&
      b.Pin(96) && b.Pin(-97);
     }, 0) ||
     form[98](b));
  }, 0);
  },
  function (b) { // 28: concatenation
    return b.Once(function (b) {
    return b.Once(form[29],95) &&
    (b.Once(function (b) {
      return b.More(function (b) {
       return b.More(form[21],0) && b.Once(form[29],95);
      }, 0) &&
      b.Pin(-97);
     }, 0) ||
     form[98](b));
  }, 0);
  },
  function (b) { // 29: repetition
    return (b.Once(form[32],0) ||
    b.Once(function (b) {
     return b.Option(form[30],0) &&
     (b.Once(form[33],0) || b.Once(form[31],0));
    }, 0));
  },
  function (b) { // 30: repeat
    return (b.Once(function (b) {
     return b.EatString("*",1) && b.Pin(99) &&
     (b.More(form[45],100) || b.Pin(101));
    }, 0) ||
    b.Once(function (b) {
     return b.More(form[45],102) &&
     (b.Once(function (b) {
       return b.EatString("*",1) && (b.More(form[45],100) || b.Pin(103));
      }, 0) ||
      b.Pin(104));
    }, 0));
  },
  function (b) { // 31: element
    return (b.Once(form[41],0) ||
    b.Once(function (b) {
     return b.Once(form[38],0) && b.Pin(-105);
    }, 0) ||
    b.Once(function (b) {
     return b.Once(form[34],0) && b.Pin(-106);
    }, 0));
  },
  function (b) { // 32: option
    return b.Once(function (b) {
    return b.EatString("[",1) && b.Any(form[21],0) &&
    (b.Once(function (b) {
      return b.Once(form[31],0) && b.Any(form[21],0) &&
      b.EatString("]",1);
     }, 0) ||
     b.Once(function (b) {
      return b.Once(form[27],95) && b.Any(form[21],0) &&
      b.EatString("]",1) && b.Pin(-97);
     }, 0)) &&
    b.Pin(99);
  }, 0);
  },
  function (b) { // 33: group
    return b.Once(function (b) {
    return b.EatString("(",1) && b.Any(form[21],0) &&
    b.Once(form[27],95) && b.Any(form[21],0) &&
    b.EatString(")",1) && b.Pin(-97);
  }, 0);
  },
  function (b) { // 34: action
    return b.Once(function (b) {
    return b.Once(form[19],107) &&
    b.Option(function (b) {
     return b.EatString("--",2) &&
     (b.Once(function (b) {
       return b.More(form[43],108) &&
       b.Option(function (b) {
        return b.EatString("(",1) && b.Any(form[47],0) &&
        b.Once(form[35],0) &&
        b.Any(function (b) {
         return b.Any(form[47],0) && b.EatString(",",1) && b.Any(form[47],0) &&
         b.Once(form[35],0);
        }, 0) &&
        b.Any(form[47],0) && b.EatString(")",1);
       }, 0);
      }, 0) ||
      form[109](b));
    }, 0);
  }, 0);
  },
  function (b) { // 35: argument
    return (b.Once(function (b) {
     return b.EatString("'",1) && b.Any(form[7],110) &&
     b.EatString("'",1);
    }, 0) ||
    b.Once(form[36],95) || b.More(form[37],111) ||
    form[112](b));
  },
  function (b) { // 36: number-val
    return b.Once(function (b) {
    return b.Option(function (b) {
     return b.EatString("-",1);
    }, 0) &&
    b.More(form[45],0) &&
    (b.Once(function (b) {
      return b.EatString(".",1) && b.More(form[45],0) && b.Pin(-113);
     }, 0) ||
     b.Pin(-114));
  }, 0);
  },
  function (b) { // 37: safe-vchar
    return (form[43](b) || form[45](b) || b.EatString("-",1) ||
    b.EatString("/",1) || b.EatString("?",1) ||
    b.EatString("+",1) || b.EatString("!",1));
  },
  function (b) { // 38: char-val
    return (b.Once(function (b) {
     return b.EatString("'",1) && b.More(form[40],85) &&
     b.EatString("'",1);
    }, 0) ||
    b.Once(function (b) {
     return b.EatString("\"",1) && b.More(form[39],85) &&
     b.EatString("\"",1) && b.Pin(115);
    }, 0));
  },
  function (b) { // 39: ex22
    return (b.EatRangeChar(0x20,0x21) || b.EatRangeChar(0x23,0x7e));
  },
  function (b) { // 40: ex27
    return (b.EatRangeChar(0x20,0x26) || b.EatRangeChar(0x28,0x7e));
  },
  function (b) { // 41: num-val
    return b.Once(function (b) {
    return b.EatString("%",1) &&
    (b.Once(function (b) {
      return b.EatString("x",1) && b.Once(form[42],0) && b.Pin(-116);
     }, 0) ||
     b.Once(function (b) {
      return b.EatString("b",1) && b.Repeat(1,53,form[44],85) &&
      b.Pin(-117);
     }, 0) ||
     form[118](b));
  }, 0);
  },
  function (b) { // 42: hex-val
    return b.Once(function (b) {
    return b.More(form[46],119) &&
    (b.Once(function (b) {
      return b.EatString("-",1) && b.More(form[46],119) && b.Pin(120);
     }, 0) ||
     b.Any(function (b) {
      return b.EatString(".",1) && b.More(form[46],119);
     }, 0));
  }, 0);
  },
  function (b) { // 43: ALPHA
    return (b.EatRangeChar(0x61,0x7a) || b.EatRangeChar(0x41,0x5a));
  },
  function (b) { // 44: BIT
    return b.EatRangeChar(0x30,0x31);
  },
  function (b) { // 45: DIGIT
    return b.EatRangeChar(0x30,0x39);
  },
  function (b) { // 46: HEXDIG
    return (form[45](b) || b.EatRangeChar(0x41,0x46));
  },
  function (b) { // 47: SP
    return b.EatString(" ",1);
  },
  function (b) { // 48: WSP
    return (b.EatString(" ",1) || b.EatString("\t",1));
  },
  function (b) { // 49: VCHAR
    return b.EatRangeChar(0x21,0x7e);
  },
  function (b) { // 50: refer--meta()
    return b.meta(0,null);
  },
  function (b) { // 51: refer--comment("/comments")
    return b.meta(12,"/comments");
  },
  function (b) { // 52: to--eol()
    return b.direct_eol();
  },
  function (b) { // 53: to--STRING("mode")
    return b.to_STRING("mode");
  },
  function (b) { // 54: to--STRING("mode","byte")
    return b.to_STRING("mode","byte");
  },
  function (b) { // 55: to--STRING("mode","bits")
    return b.to_STRING("mode","bits");
  },
  function (b) { // 56: to--fault("Unsupported %s mode")
    return b.direct_fault("Unsupported %s mode");
  },
  function (b) { // 57: refer--STRING("crlf","unescape")
    return b.refer_STRING("crlf","unescape");
  },
  function (b) { // 58: refer--STRING("indent","unescape")
    return b.refer_STRING("indent","unescape");
  },
  function (b) { // 59: refer--STRING("locfield")
    return b.refer_STRING("locfield");
  },
  function (b) { // 60: refer--STRING("typefield")
    return b.refer_STRING("typefield");
  },
  function (b) { // 61: refer--infix("infix")
    return b.meta(4,"infix");
  },
  function (b) { // 62: refer--OBJECT("custom")
    return b.refer_OBJECT("custom");
  },
  function (b) { // 63: to--fault("Illegal configuration %q",-3)
    return b.direct_fault("Illegal configuration %q",-3);
  },
  function (b) { // 64: refer--STRING("typenames")
    return b.refer_STRING("typenames");
  },
  function (b) { // 65: refer--type("types")
    return b.meta(2,"types");
  },
  function (b) { // 66: to--fault("Illegal type annotation %q","typenames")
    return b.direct_fault("Illegal type annotation %q","typenames");
  },
  function (b) { // 67: refer--STRING("key")
    return b.refer_STRING("key");
  },
  function (b) { // 68: to--true("val")
    return b.to_true("val");
  },
  function (b) { // 69: to--false("val")
    return b.to_false("val");
  },
  function (b) { // 70: refer--stringList("val")
    return b.meta(1,"val");
  },
  function (b) { // 71: to--fault("Invalid custom configuration %q","key")
    return b.direct_fault("Invalid custom configuration %q","key");
  },
  function (b) { // 72: refer--STRING("val","unescape")
    return b.refer_STRING("val","unescape");
  },
  function (b) { // 73: refer--STRING("node")
    return b.refer_STRING("node");
  },
  function (b) { // 74: refer--STRING("left")
    return b.refer_STRING("left");
  },
  function (b) { // 75: refer--STRING("operator")
    return b.refer_STRING("operator");
  },
  function (b) { // 76: refer--STRING("right")
    return b.refer_STRING("right");
  },
  function (b) { // 77: refer--ARRAY("priority")
    return b.refer_ARRAY("priority");
  },
  function (b) { // 78: refer--stringList()
    return b.meta(1,null);
  },
  function (b) { // 79: refer--OBJECT("fields")
    return b.refer_OBJECT("fields");
  },
  function (b) { // 80: to--STRING("kind","struct")
    return b.to_STRING("kind","struct");
  },
  function (b) { // 81: refer--field("val")
    return b.meta(3,"val");
  },
  function (b) { // 82: to--fault("Invalid type-annotation: %s","key")
    return b.direct_fault("Invalid type-annotation: %s","key");
  },
  function (b) { // 83: refer--STRING("kind")
    return b.refer_STRING("kind");
  },
  function (b) { // 84: refer--ARRAY("annotation")
    return b.refer_ARRAY("annotation");
  },
  function (b) { // 85: refer--STRING("value")
    return b.refer_STRING("value");
  },
  function (b) { // 86: to--STRING("kind","INT")
    return b.to_STRING("kind","INT");
  },
  function (b) { // 87: refer--STRING("value","unescape")
    return b.refer_STRING("value","unescape");
  },
  function (b) { // 88: to--STRING("kind","STRING")
    return b.to_STRING("kind","STRING");
  },
  function (b) { // 89: to--true("value")
    return b.to_true("value");
  },
  function (b) { // 90: to--STRING("kind","BOOL")
    return b.to_STRING("kind","BOOL");
  },
  function (b) { // 91: to--false("value")
    return b.to_false("value");
  },
  function (b) { // 92: refer--STRING()
    return b.refer_STRING();
  },
  function (b) { // 93: refer--STRING("formnames")
    return b.refer_STRING("formnames");
  },
  function (b) { // 94: refer--pending("formulas")
    return b.refer_pending("formulas");
  },
  function (b) { // 95: refer--pending("factor")
    return b.refer_pending("factor");
  },
  function (b) { // 96: to--true("choice")
    return b.to_true("choice");
  },
  function (b) { // 97: to--type("list")
    return b.to_type(6);
  },
  function (b) { // 98: to--discard()
    return b.direct_discard();
  },
  function (b) { // 99: to--INT("min",0)
    return b.to_INT("min",0);
  },
  function (b) { // 100: refer--INT("max")
    return b.refer_INT("max");
  },
  function (b) { // 101: to--INT("max",1)
    return b.to_INT("max",1);
  },
  function (b) { // 102: refer--INT("min")
    return b.refer_INT("min");
  },
  function (b) { // 103: to--INT("max",-1)
    return b.to_INT("max",-1);
  },
  function (b) { // 104: to--copy("min","max")
    return b.to_copy("min","max");
  },
  function (b) { // 105: to--type("string")
    return b.to_type(9);
  },
  function (b) { // 106: to--type("action")
    return b.to_type(10);
  },
  function (b) { // 107: refer--STRING("refer")
    return b.refer_STRING("refer");
  },
  function (b) { // 108: refer--STRING("name")
    return b.refer_STRING("name");
  },
  function (b) { // 109: to--fault("Invalid arguments of %s","refer")
    return b.direct_fault("Invalid arguments of %s","refer");
  },
  function (b) { // 110: refer--STRING("factor","unescape")
    return b.refer_STRING("factor","unescape");
  },
  function (b) { // 111: refer--STRING("factor")
    return b.refer_STRING("factor");
  },
  function (b) { // 112: to--fault("Invalid arguments on %s","refer")
    return b.direct_fault("Invalid arguments on %s","refer");
  },
  function (b) { // 113: to--type("FLOAT")
    return b.to_type("FLOAT");
  },
  function (b) { // 114: to--type("INT")
    return b.to_type("INT");
  },
  function (b) { // 115: to--false("sensitive")
    return b.to_false("sensitive");
  },
  function (b) { // 116: to--type("codes")
    return b.to_type(7);
  },
  function (b) { // 117: to--type("bits")
    return b.to_type(8);
  },
  function (b) { // 118: to--fault("Unsupport num-val formula %q",-1)
    return b.direct_fault("Unsupport num-val formula %q",-1);
  },
  function (b) { // 119: refer--RUNE("value",16)
    return b.refer_RUNE("value",16);
  },
  function (b) { // 120: to--true("isRange")
    return b.to_true("isRange");
  }
];
