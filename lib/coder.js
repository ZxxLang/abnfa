// Generated by abnfa/lib/coder-js.js
module.exports = {
  "bytes": false,
  "typefield": "type",
  "locfield": "loc",
  "crlf": "",
  "indent": "",
  "infix": null,
  "custom": {
    "language": "ABNFA",
    "fileTypes": [
      "abnf"
    ],
    "scopeName": "source.abnf",
    "description": "ABNFA to AST"
  },
  "typenames": [
    "metadata",
    "stringList",
    "type",
    "field",
    "infix",
    "repeat",
    "list",
    "codes",
    "bits",
    "string",
    "action",
    "index",
    "comment"
  ],
  "types": [
    {
      "kind": "struct",
      "fields": {
        "bytes": {
          "kind": "bool",
          "value": "false",
          "annotation": null
        },
        "typefield": {
          "kind": "string",
          "value": "type",
          "annotation": null
        },
        "locfield": {
          "kind": "string",
          "value": "loc",
          "annotation": null
        },
        "crlf": {
          "kind": "string",
          "value": "",
          "annotation": null
        },
        "indent": {
          "kind": "string",
          "value": "",
          "annotation": null
        },
        "infix": {
          "kind": "type",
          "value": "",
          "annotation": [
            "infix"
          ]
        },
        "custom": {
          "kind": "object",
          "value": "",
          "annotation": [
            "STRING",
            "stringList"
          ]
        },
        "typenames": {
          "kind": "unique",
          "value": "",
          "annotation": [
            "STRING"
          ]
        },
        "types": {
          "kind": "array",
          "value": "",
          "annotation": [
            "type"
          ]
        },
        "formnames": {
          "kind": "unique",
          "value": "",
          "annotation": [
            "STRING"
          ]
        },
        "formulas": {
          "kind": "array",
          "value": "",
          "annotation": [
            "list",
            "action",
            "string",
            "codes",
            "bits",
            "index"
          ]
        },
        "comments": {
          "kind": "array",
          "value": "",
          "annotation": [
            "comment"
          ]
        }
      },
      "annotation": null
    },
    {
      "kind": "array",
      "annotation": [
        "STRING"
      ]
    },
    {
      "kind": "struct",
      "fields": {
        "kind": {
          "kind": "string",
          "value": "",
          "annotation": null
        },
        "fields": {
          "kind": "object",
          "value": "",
          "annotation": [
            "field"
          ]
        },
        "annotation": {
          "kind": "array",
          "value": "",
          "annotation": [
            "STRING"
          ]
        }
      },
      "annotation": null
    },
    {
      "kind": "STRUCT",
      "fields": {
        "kind": {
          "kind": "string",
          "value": "",
          "annotation": null
        },
        "value": {
          "kind": "string",
          "value": "",
          "annotation": null
        },
        "annotation": {
          "kind": "array",
          "value": "",
          "annotation": [
            "STRING"
          ]
        }
      },
      "annotation": null
    },
    {
      "kind": "struct",
      "fields": {
        "types": {
          "kind": "array",
          "value": "",
          "annotation": [
            "STRING"
          ]
        },
        "left": {
          "kind": "string",
          "value": "",
          "annotation": null
        },
        "operator": {
          "kind": "string",
          "value": "",
          "annotation": null
        },
        "right": {
          "kind": "string",
          "value": "",
          "annotation": null
        },
        "priority": {
          "kind": "array",
          "value": "",
          "annotation": [
            "stringList"
          ]
        }
      },
      "annotation": null
    },
    {
      "kind": "struct",
      "fields": {
        "min": {
          "kind": "int",
          "value": "1",
          "annotation": null
        },
        "max": {
          "kind": "int",
          "value": "1",
          "annotation": null
        }
      },
      "annotation": null
    },
    {
      "kind": "struct",
      "fields": {
        "repeat": {
          "kind": "mixins",
          "value": "",
          "annotation": null
        },
        "choice": {
          "kind": "bool",
          "value": "false",
          "annotation": null
        },
        "factor": {
          "kind": "array",
          "value": "",
          "annotation": [
            "list",
            "action",
            "string",
            "codes",
            "bits",
            "index"
          ]
        }
      },
      "annotation": null
    },
    {
      "kind": "struct",
      "fields": {
        "repeat": {
          "kind": "mixins",
          "value": "",
          "annotation": null
        },
        "value": {
          "kind": "array",
          "value": "",
          "annotation": [
            "RUNE"
          ]
        },
        "isRange": {
          "kind": "bool",
          "value": "false",
          "annotation": null
        }
      },
      "annotation": null
    },
    {
      "kind": "struct",
      "fields": {
        "repeat": {
          "kind": "mixins",
          "value": "",
          "annotation": null
        },
        "value": {
          "kind": "string",
          "value": "",
          "annotation": null
        }
      },
      "annotation": null
    },
    {
      "kind": "struct",
      "fields": {
        "repeat": {
          "kind": "mixins",
          "value": "",
          "annotation": null
        },
        "value": {
          "kind": "string",
          "value": "",
          "annotation": null
        },
        "sensitive": {
          "kind": "bool",
          "value": "true",
          "annotation": null
        }
      },
      "annotation": null
    },
    {
      "kind": "struct",
      "fields": {
        "repeat": {
          "kind": "mixins",
          "value": "",
          "annotation": null
        },
        "refer": {
          "kind": "string",
          "value": "",
          "annotation": null
        },
        "name": {
          "kind": "string",
          "value": "",
          "annotation": null
        },
        "factor": {
          "kind": "array",
          "value": "",
          "annotation": [
            "STRING",
            "INT"
          ]
        }
      },
      "annotation": null
    },
    {
      "kind": "struct",
      "fields": {
        "repeat": {
          "kind": "mixins",
          "value": "",
          "annotation": null
        },
        "refer": {
          "kind": "int",
          "value": "0",
          "annotation": null
        },
        "action": {
          "kind": "int",
          "value": "0",
          "annotation": null
        }
      },
      "annotation": null
    },
    {
      "kind": "struct",
      "fields": {
        "value": {
          "kind": "string",
          "value": "",
          "annotation": null
        }
      },
      "annotation": null
    }
  ],
  "formnames": [
    "first",
    "metadata",
    "meta",
    "custom",
    "or",
    "strings",
    "string",
    "quotes-vchar",
    "infix",
    "infixes",
    "type-declare",
    "field-declare",
    "type-annotation",
    "field-annotation",
    "bool-val",
    "annotation",
    "rulename",
    "defined-as",
    "c-wsp",
    "c-nl",
    "comment",
    "comment-val",
    "rulelist",
    "rule",
    "alternation",
    "concatenation",
    "repetition",
    "repeat",
    "element",
    "option",
    "group",
    "action",
    "argument",
    "int-val",
    "safe-vchar",
    "char-val",
    "ex22",
    "ex27",
    "num-val",
    "hex-val",
    "ALPHA",
    "BIT",
    "DIGIT",
    "HEXDIG",
    "SP",
    "WSP",
    "VCHAR",
    "to--true(\"bytes\")",
    "to--false(\"bytes\")",
    "to--fault(\"Invalid value on to-bytes %s\")",
    "refer--STRING(\"crlf\",\"unescape\")",
    "refer--STRING(\"indent\",\"unescape\")",
    "refer--STRING(\"locfield\")",
    "refer--STRING(\"typefield\")",
    "refer--infix(\"infix\")",
    "refer--PROPERTY(\"custom\")",
    "to--fault(\"Illegal configuration %q\",-3)",
    "refer--STRING(\"typenames\")",
    "refer--type(\"types\")",
    "to--fault(\"Illegal type annotation %q\",\"typenames\")",
    "refer--STRING()",
    "refer--ARRAY(\"VALUE\")",
    "to--fault(\"Invalid custom configuration %q\")",
    "refer--STRING(\"VALUE\",\"unescape\")",
    "refer--STRING(\"node\")",
    "refer--STRING(\"left\")",
    "refer--STRING(\"operator\")",
    "refer--STRING(\"right\")",
    "refer--ARRAY(\"priority\")",
    "refer--PROPERTY(\"fields\")",
    "to--STRING(\"kind\",\"struct\")",
    "refer--STRING(\"KEY\")",
    "refer--field(\"VALUE\")",
    "to--fault(\"Invalid type-annotation on field %s\",\"KEY\")",
    "to--STRING(\"kind\",\"array\")",
    "to--STRING(\"kind\",\"unique\")",
    "to--STRING(\"kind\",\"object\")",
    "to--STRING(\"kind\",\"map\")",
    "to--STRING(\"kind\",\"embedded\")",
    "to--STRING(\"kind\",\"null\")",
    "to--STRING(\"kind\",\"mixins\")",
    "to--STRING(\"kind\",\"type\")",
    "refer--STRING(\"value\")",
    "to--STRING(\"kind\",\"int\")",
    "refer--STRING(\"value\",\"unescape\")",
    "to--STRING(\"kind\",\"string\")",
    "to--STRING(\"kind\",\"bool\")",
    "refer--STRING(\"annotation\")",
    "refer--comment(\"/comments\")",
    "to--eol()",
    "refer--STRING(\"forms\")",
    "refer--pending(\"formulas\")",
    "refer--pending(\"factor\")",
    "refer--list(\"factor\")",
    "to--true(\"choice\")",
    "to--type(\"list\")",
    "to--discard()",
    "refer--repeat(\"repeat\")",
    "to--INT(\"min\",0)",
    "refer--INT(\"max\")",
    "to--INT(\"max\",1)",
    "refer--INT(\"min\")",
    "to--INT(\"max\",-1)",
    "to--copy(\"min\",\"max\")",
    "to--type(\"string\")",
    "to--type(\"action\")",
    "refer--STRING(\"refer\")",
    "refer--STRING(\"name\")",
    "to--fault(\"Invalid arguments of %s\",\"refer\")",
    "refer--STRING(\"factor\",\"unescape\")",
    "refer--INT(\"factor\")",
    "refer--STRING(\"factor\")",
    "to--fault(\"Invalid arguments on %s\",\"refer\")",
    "to--false(\"sensitive\")",
    "to--type(\"codes\")",
    "to--type(\"bits\")",
    "to--fault(\"Unsupport num-val formula %q\",-1)",
    "refer--RUNE(\"value\",16)",
    "to--true(\"isRange\")"
  ],
  "formulas": null,
  "comments": []
};
module.exports.formulas = [
  function (b) { // 0: [object Object]
    return b.Any(b.Form(19),0) && b.Once(b.Form(1),0) &&
    b.More(b.Form(19),0) && b.Once(b.Form(22),0);
  },
  function (b) { // 1: [object Object]
    return b.EatString("ABNF-Actions-Metadata",21) &&
    b.Once(b.Form(17),0) && b.Once(b.Form(2),0) &&
    b.Any(function (b) {
     return b.More(b.Form(19),0) && b.More(b.Form(45),0) &&
     b.Once(b.Form(2),0);
    }, 0);
  },
  function (b) { // 2: [object Object]
    return b.EatString("to-",3) &&
     (b.EatString("bytes",5) && b.More(b.Form(45),0) &&
       (b.EatString("true",4) && b.Pin(47) ||
        b.EatString("false",5) && b.Pin(48) ||
        b.Form(undefined)) ||
      b.EatString("crlf",4) && b.More(b.Form(45),0) &&
       b.EatString("'",1) && b.Any(b.Form(7),50) &&
       b.EatString("'",1) ||
      b.EatString("indent",6) && b.More(b.Form(45),0) &&
       b.EatString("'",1) && b.Any(b.Form(7),51) &&
       b.EatString("'",1) ||
      b.EatString("locfield",8) && b.More(b.Form(45),0) &&
       b.EatString("'",1) && b.Any(b.Form(40),52) &&
       b.EatString("'",1) ||
      b.EatString("typefield",9) && b.More(b.Form(45),0) &&
       b.EatString("'",1) && b.Any(b.Form(40),53) &&
       b.EatString("'",1) ||
      b.EatString("infix",5) && b.More(b.Form(45),0) &&
       b.Once(b.Form(8),54) ||
      b.Once(b.Form(3),55) || b.Form(undefined)) ||
    b.Once(b.Form(16),57) && b.More(b.Form(45),0) &&
     (b.Once(b.Form(10),58) || b.Form(undefined));
  },
  function (b) { // 3: [object Object]
    return b.Once(b.Form(16),60) && b.More(b.Form(45),0) &&
    (b.Once(b.Form(6),0) ||
     b.EatString("[",1) && b.Any(b.Form(45),0) &&
      b.Once(b.Form(5),61) && b.Any(b.Form(45),0) &&
      b.EatString("]",1) ||
     b.Form(undefined));
  },
  function (b) { // 4: [object Object]
    return b.More(b.Form(18),0) && b.EatString("/",1) &&
    b.More(b.Form(18),0);
  },
  function (b) { // 5: [object Object]
    return b.Once(b.Form(6),0) &&
    b.Any(function (b) {
     return b.Once(b.Form(4),0) && b.Once(b.Form(6),0);
    }, 0);
  },
  function (b) { // 6: [object Object]
    return b.EatString("'",1) && b.Any(b.Form(7),63) &&
    b.EatString("'",1);
  },
  function (b) { // 7: [object Object]
    return (b.EatRangeChar(0x20,0x21) || b.EatRangeChar(0x23,0x26) ||
     b.EatString(40,1) || b.EatRangeChar(0x2a,0x5b) ||
     b.EatRangeChar(0x5d,0x7e)) ||
    b.EatString("\\",1) &&
     (b.EatString("\"",1) || b.EatString("'",1) ||
      b.EatString("\\",1) ||
      b.EatString("x",1) && b.Repeat(2,2,b.Form(43),0) ||
      b.EatString("u",1) &&
       (b.EatString("{",1) && b.Repeat(1,6,b.Form(43),0) &&
         b.EatString("}",1) ||
        b.Repeat(4,4,b.Form(43),0)));
  },
  function (b) { // 8: [object Object]
    return b.EatString("(",1) && b.Once(b.Form(18),0) &&
    b.EatString("node",4) && b.More(b.Form(45),0) &&
    b.EatString("'",1) && b.More(b.Form(40),64) &&
    b.EatString("'",1) && b.More(b.Form(18),0) &&
    b.EatString("left",4) && b.More(b.Form(45),0) &&
    b.EatString("'",1) && b.More(b.Form(40),65) &&
    b.EatString("'",1) && b.More(b.Form(18),0) &&
    b.EatString("operator",8) && b.More(b.Form(45),0) &&
    b.EatString("'",1) && b.More(b.Form(40),66) &&
    b.EatString("'",1) && b.More(b.Form(18),0) &&
    b.EatString("right",5) && b.More(b.Form(45),0) &&
    b.EatString("'",1) && b.More(b.Form(40),67) &&
    b.EatString("'",1) && b.More(b.Form(18),0) &&
    b.EatString("priority",8) && b.More(b.Form(45),0) &&
    b.EatString("[",1) && b.Any(b.Form(18),0) &&
    b.Once(b.Form(9),68) &&
    b.Any(function (b) {
     return b.More(b.Form(18),0) && b.Once(b.Form(9),68);
    }, 0) &&
    b.Any(b.Form(18),0) && b.EatString("]",1) &&
    b.Once(b.Form(18),0) && b.EatString(")",1);
  },
  function (b) { // 9: [object Object]
    return b.EatString("[",1) && b.Any(b.Form(18),0) &&
    b.Once(b.Form(6),0) &&
    b.Any(function (b) {
     return b.Once(b.Form(4),0) && b.Once(b.Form(6),0);
    }, 0) &&
    b.Any(b.Form(18),0) && b.EatString("]",1);
  },
  function (b) { // 10: [object Object]
    return b.EatString("(",1) &&
     b.More(function (b) {
      return b.More(b.Form(18),0) && b.Once(b.Form(11),69);
     }, 0) &&
     b.More(b.Form(18),0) && b.EatString(")",1) &&
     b.Pin(70) ||
    b.Once(b.Form(12),0);
  },
  function (b) { // 11: [object Object]
    return b.Once(b.Form(16),71) && b.More(b.Form(45),0) &&
    (b.Once(b.Form(13),72) || b.Form(undefined));
  },
  function (b) { // 12: [object Object]
    return b.EatString("array",5) && b.Option(b.Form(15),0) &&
     b.Pin(74) ||
    b.EatString("unique",6) && b.Option(b.Form(15),0) &&
     b.Pin(75) ||
    b.EatString("object",6) && b.Option(b.Form(15),0) &&
     b.Pin(76) ||
    b.EatString("map",3) && b.Option(b.Form(15),0) && b.Pin(77) ||
    b.EatString("embedded",8) && b.Option(b.Form(15),0) &&
     b.Pin(78) ||
    b.EatString("null",4) && b.Once(b.Form(15),0) && b.Pin(79) ||
    b.EatString("mixins",6) && b.Pin(80) ||
    b.Once(b.Form(15),0) && b.Pin(81);
  },
  function (b) { // 13: [object Object]
    return b.Once(b.Form(12),0) ||
    b.EatString("%d",2) && b.More(b.Form(42),82) && b.Pin(83) ||
    b.EatString("'",1) && b.Any(b.Form(7),84) &&
     b.EatString("'",1) && b.Pin(85) ||
    b.Once(b.Form(14),82) && b.Pin(86);
  },
  function (b) { // 14: [object Object]
    return b.EatString("true",4) || b.EatString("false",5);
  },
  function (b) { // 15: [object Object]
    return b.EatString("<",1) && b.Once(b.Form(16),87) &&
    b.Any(function (b) {
     return b.EatString(",",1) && b.Option(b.Form(44),0) &&
     b.Once(b.Form(16),87);
    }, 0) &&
    b.EatString(">",1);
  },
  function (b) { // 16: [object Object]
    return b.Form(40) &&
    b.Any(function (b) {
     return b.Option(function (b) {
      return b.EatString("-",1);
     }, 0) &&
     (b.Form(40) || b.Form(42));
    }, 0);
  },
  function (b) { // 17: [object Object]
    return b.Any(b.Form(18),0) && b.EatString("=",1) &&
    b.Any(b.Form(18),0);
  },
  function (b) { // 18: [object Object]
    return b.Form(45) || b.Once(b.Form(19),0) && b.Form(45);
  },
  function (b) { // 19: [object Object]
    return b.Option(b.Form(20),88) && b.More(b.Form(undefined),0);
  },
  function (b) { // 20: [object Object]
    return b.EatString(";",1) && b.Once(b.Form(21),82);
  },
  function (b) { // 21: [object Object]
    return b.Form(45) || b.Form(46);
  },
  function (b) { // 22: [object Object]
    return b.Once(b.Form(23),0) &&
    b.Any(function (b) {
     return b.Any(b.Form(45),0) && b.Once(b.Form(19),0) &&
     b.Option(b.Form(23),0);
    }, 0);
  },
  function (b) { // 23: [object Object]
    return b.Once(b.Form(16),90) && b.Once(b.Form(17),0) &&
    b.Once(b.Form(24),91);
  },
  function (b) { // 24: [object Object]
    return b.Once(b.Form(25),92) &&
    (b.More(function (b) {
       return b.Once(b.Form(4),0) && b.Once(b.Form(25),93);
      }, 0) &&
      b.Pin(94) && b.Pin(95) ||
     b.Form(undefined));
  },
  function (b) { // 25: [object Object]
    return b.Once(b.Form(26),93) &&
    (b.More(function (b) {
       return b.More(b.Form(18),0) && b.Once(b.Form(26),93);
      }, 0) &&
      b.Pin(95) ||
     b.Form(undefined));
  },
  function (b) { // 26: [object Object]
    return b.Once(b.Form(29),0) ||
    b.Option(b.Form(27),97) &&
     (b.Once(b.Form(30),0) || b.Once(b.Form(28),0));
  },
  function (b) { // 27: [object Object]
    return b.EatString("*",1) && b.Pin(98) &&
     (b.More(b.Form(42),99) || b.Pin(100)) ||
    b.More(b.Form(42),101) &&
     (b.EatString("*",1) && (b.More(b.Form(42),99) || b.Pin(102)) ||
      b.Pin(103));
  },
  function (b) { // 28: [object Object]
    return b.Once(b.Form(38),0) || b.Once(b.Form(35),0) && b.Pin(104) ||
    b.Once(b.Form(31),0) && b.Pin(105);
  },
  function (b) { // 29: [object Object]
    return b.EatString("[",1) && b.Any(b.Form(18),0) &&
    (b.Once(b.Form(28),0) && b.Any(b.Form(18),0) &&
      b.EatString("]",1) ||
     b.Once(b.Form(24),92) && b.Any(b.Form(18),0) &&
      b.EatString("]",1) && b.Pin(95)) &&
    b.Pin(98);
  },
  function (b) { // 30: [object Object]
    return b.EatString("(",1) && b.Any(b.Form(18),0) &&
    b.Once(b.Form(24),92) && b.Any(b.Form(18),0) &&
    b.EatString(")",1) && b.Pin(95);
  },
  function (b) { // 31: [object Object]
    return b.Once(b.Form(16),106) &&
    b.Option(function (b) {
     return b.EatString("--",2) &&
     (b.More(b.Form(40),107) &&
       b.Option(function (b) {
        return b.EatString("(",1) && b.Any(b.Form(44),0) &&
        b.Once(b.Form(32),0) &&
        b.Any(function (b) {
         return b.Any(b.Form(44),0) && b.EatString(",",1) &&
         b.Any(b.Form(44),0) && b.Once(b.Form(32),0);
        }, 0) &&
        b.Any(b.Form(44),0) && b.EatString(")",1);
       }, 0) ||
      b.Form(undefined));
    }, 0);
  },
  function (b) { // 32: [object Object]
    return b.EatString("'",1) && b.Any(b.Form(7),109) &&
     b.EatString("'",1) ||
    b.Once(b.Form(33),110) || b.More(b.Form(34),111) ||
    b.Form(undefined);
  },
  function (b) { // 33: [object Object]
    return b.EatString("-",1) && b.More(b.Form(42),0);
  },
  function (b) { // 34: [object Object]
    return b.Form(40) || b.Form(42) || b.EatString("-",1);
  },
  function (b) { // 35: [object Object]
    return b.EatString("'",1) && b.More(b.Form(37),82) &&
     b.EatString("'",1) ||
    b.EatString("\"",1) && b.More(b.Form(36),82) &&
     b.EatString("\"",1) && b.Pin(113);
  },
  function (b) { // 36: [object Object]
    return b.EatRangeChar(0x20,0x21) || b.EatRangeChar(0x23,0x7e);
  },
  function (b) { // 37: [object Object]
    return b.EatRangeChar(0x20,0x26) || b.EatRangeChar(0x28,0x7e);
  },
  function (b) { // 38: [object Object]
    return b.EatString("%",1) &&
    (b.EatString("x",1) && b.Once(b.Form(39),0) && b.Pin(114) ||
     b.EatString("b",1) && b.Repeat(1,53,b.Form(41),82) &&
      b.Pin(115) ||
     b.Form(undefined));
  },
  function (b) { // 39: [object Object]
    return b.More(b.Form(43),117) &&
    (b.EatString("-",1) && b.More(b.Form(43),117) && b.Pin(118) ||
     b.Any(function (b) {
      return b.EatString(".",1) && b.More(b.Form(43),117);
     }, 0));
  },
  function (b) { // 40: [object Object]
    return b.EatRangeChar(0x61,0x7a) || b.EatRangeChar(0x41,0x5a);
  },
  function (b) { // 41: [object Object]
    return b.EatRangeChar(0x30,0x31);
  },
  function (b) { // 42: [object Object]
    return b.EatRangeChar(0x30,0x39);
  },
  function (b) { // 43: [object Object]
    return b.Form(42) || b.EatRangeChar(0x41,0x46);
  },
  function (b) { // 44: [object Object]
    return b.EatString(32,1);
  },
  function (b) { // 45: [object Object]
    return b.EatString(32,1) || b.EatString(9,1);
  },
  function (b) { // 46: [object Object]
    return b.EatRangeChar(0x21,0x7e);
  },
  function (b) { // 47: [object Object]
    return b.to_true("bytes");
  },
  function (b) { // 48: [object Object]
    return b.to_false("bytes");
  },
  function (b) { // 49: [object Object]
    return b.fault("Invalid value on to-bytes %s");
  },
  function (b) { // 50: [object Object]
    return b.refer_STRING("crlf","unescape");
  },
  function (b) { // 51: [object Object]
    return b.refer_STRING("indent","unescape");
  },
  function (b) { // 52: [object Object]
    return b.refer_STRING("locfield");
  },
  function (b) { // 53: [object Object]
    return b.refer_STRING("typefield");
  },
  function (b) { // 54: [object Object]
    return b.Create(4,"infix");
  },
  function (b) { // 55: [object Object]
    return b.refer_PROPERTY("custom");
  },
  function (b) { // 56: [object Object]
    return b.fault("Illegal configuration %q",-3);
  },
  function (b) { // 57: [object Object]
    return b.refer_STRING("typenames");
  },
  function (b) { // 58: [object Object]
    return b.Create(2,"types");
  },
  function (b) { // 59: [object Object]
    return b.fault("Illegal type annotation %q","typenames");
  },
  function (b) { // 60: [object Object]
    return b.refer_STRING();
  },
  function (b) { // 61: [object Object]
    return b.refer_ARRAY("VALUE");
  },
  function (b) { // 62: [object Object]
    return b.fault("Invalid custom configuration %q");
  },
  function (b) { // 63: [object Object]
    return b.refer_STRING("VALUE","unescape");
  },
  function (b) { // 64: [object Object]
    return b.refer_STRING("node");
  },
  function (b) { // 65: [object Object]
    return b.refer_STRING("left");
  },
  function (b) { // 66: [object Object]
    return b.refer_STRING("operator");
  },
  function (b) { // 67: [object Object]
    return b.refer_STRING("right");
  },
  function (b) { // 68: [object Object]
    return b.refer_ARRAY("priority");
  },
  function (b) { // 69: [object Object]
    return b.refer_PROPERTY("fields");
  },
  function (b) { // 70: [object Object]
    return b.to_STRING("kind","struct");
  },
  function (b) { // 71: [object Object]
    return b.refer_STRING("KEY");
  },
  function (b) { // 72: [object Object]
    return b.Create(3,"VALUE");
  },
  function (b) { // 73: [object Object]
    return b.fault("Invalid type-annotation on field %s","KEY");
  },
  function (b) { // 74: [object Object]
    return b.to_STRING("kind","array");
  },
  function (b) { // 75: [object Object]
    return b.to_STRING("kind","unique");
  },
  function (b) { // 76: [object Object]
    return b.to_STRING("kind","object");
  },
  function (b) { // 77: [object Object]
    return b.to_STRING("kind","map");
  },
  function (b) { // 78: [object Object]
    return b.to_STRING("kind","embedded");
  },
  function (b) { // 79: [object Object]
    return b.to_STRING("kind","null");
  },
  function (b) { // 80: [object Object]
    return b.to_STRING("kind","mixins");
  },
  function (b) { // 81: [object Object]
    return b.to_STRING("kind","type");
  },
  function (b) { // 82: [object Object]
    return b.refer_STRING("value");
  },
  function (b) { // 83: [object Object]
    return b.to_STRING("kind","int");
  },
  function (b) { // 84: [object Object]
    return b.refer_STRING("value","unescape");
  },
  function (b) { // 85: [object Object]
    return b.to_STRING("kind","string");
  },
  function (b) { // 86: [object Object]
    return b.to_STRING("kind","bool");
  },
  function (b) { // 87: [object Object]
    return b.refer_STRING("annotation");
  },
  function (b) { // 88: [object Object]
    return b.Create(12,"/comments");
  },
  function (b) { // 89: [object Object]
    return b.eol();
  },
  function (b) { // 90: [object Object]
    return b.refer_STRING("forms");
  },
  function (b) { // 91: [object Object]
    return b.refer_pending("formulas");
  },
  function (b) { // 92: [object Object]
    return b.refer_pending("factor");
  },
  function (b) { // 93: [object Object]
    return b.Create(6,"factor");
  },
  function (b) { // 94: [object Object]
    return b.to_true("choice");
  },
  function (b) { // 95: [object Object]
    return b.to_type("list");
  },
  function (b) { // 96: [object Object]
    return b.discard();
  },
  function (b) { // 97: [object Object]
    return b.Create(5,"repeat");
  },
  function (b) { // 98: [object Object]
    return b.to_INT("min",0);
  },
  function (b) { // 99: [object Object]
    return b.refer_INT("max");
  },
  function (b) { // 100: [object Object]
    return b.to_INT("max",1);
  },
  function (b) { // 101: [object Object]
    return b.refer_INT("min");
  },
  function (b) { // 102: [object Object]
    return b.to_INT("max",-1);
  },
  function (b) { // 103: [object Object]
    return b.to_copy("min","max");
  },
  function (b) { // 104: [object Object]
    return b.to_type("string");
  },
  function (b) { // 105: [object Object]
    return b.to_type("action");
  },
  function (b) { // 106: [object Object]
    return b.refer_STRING("refer");
  },
  function (b) { // 107: [object Object]
    return b.refer_STRING("name");
  },
  function (b) { // 108: [object Object]
    return b.fault("Invalid arguments of %s","refer");
  },
  function (b) { // 109: [object Object]
    return b.refer_STRING("factor","unescape");
  },
  function (b) { // 110: [object Object]
    return b.refer_INT("factor");
  },
  function (b) { // 111: [object Object]
    return b.refer_STRING("factor");
  },
  function (b) { // 112: [object Object]
    return b.fault("Invalid arguments on %s","refer");
  },
  function (b) { // 113: [object Object]
    return b.to_false("sensitive");
  },
  function (b) { // 114: [object Object]
    return b.to_type("codes");
  },
  function (b) { // 115: [object Object]
    return b.to_type("bits");
  },
  function (b) { // 116: [object Object]
    return b.fault("Unsupport num-val formula %q",-1);
  },
  function (b) { // 117: [object Object]
    return b.refer_RUNE("value",16);
  },
  function (b) { // 118: [object Object]
    return b.to_true("isRange");
  }
];
