; ABNFA Definition of ABNFA

ABNF-Actions-Metadata =
  ; Custom configuration
  to-language     'ABNFA'
  to-fileTypes    ['abnf']
  to-scopeName    'source.abnf'
  to-description  'ABNFA to AST'

  ; Specific configuration for metadata
  to-typefield 'type'
  to-locfield  'loc'

  ; AST node structure described
  metadata  (
    bytes     false
    typefield 'type'
    locfield  'loc'
    crlf      ''
    indent    ''
    infix     <infix>
    custom    object<STRING, stringList>
    typenames unique<STRING>
    types     array<type>
    formnames unique<STRING>
    formulas  array<list, action, string, codes, bits, index>
    comments  array<comment>
  )

  stringList ARRAY<STRING>

  type  (
    kind        '' ; 'OBJECT','MAP','ARRAY','UNIQUE',''
    fields      object<field>
    annotation  array<STRING>
  )

  field (
    kind        ''
    value       ''
    annotation  array<STRING>
  )

  infix  (
    types       array<STRING>
    left        ''
    operator    ''
    right       ''
    priority    array<stringList>
  )

  repeat  (
    min %d1
    max %d1
  )

  list (
    repeat  mixins
    choice  false
    factor  array<list, action, string, codes, bits, index>
  )

  codes (
    repeat  mixins
    value   array<RUNE>
    isRange false
  )

  bits   (
    repeat  mixins
    value   ''
  )

  string (
    repeat    mixins
    value     ''
    sensitive true
  )

  action (
    repeat    mixins
    refer     ''
    name      ''
    factor    array<STRING, INT>
  )

  index (
    repeat    mixins
    refer     %d0
    action    %d0
  )

  comment (
    value     ''
  )

first =
  *c-nl metadata 1*c-nl rulelist

metadata =
  'ABNF-Actions-Metadata' defined-as meta *(1*c-nl 1*WSP meta)

meta =
    'to-' (
        'bytes' 1*WSP (
              'true' to--true(bytes)
            / 'false' to--false(bytes)
            / to--fault('Invalid value on to-bytes %s')
          )
      / 'crlf' 1*WSP "'" *quotes-vchar--STRING(crlf, unescape) "'"
      / 'indent' 1*WSP "'" *quotes-vchar--STRING(indent, unescape) "'"
      / 'locfield' 1*WSP "'" *ALPHA--STRING(locfield) "'"
      / 'typefield' 1*WSP "'" *ALPHA--STRING(typefield) "'"
      / 'infix' 1*WSP infix--infix(infix)
      / custom--PROPERTY(custom)
      / to--fault('Illegal configuration %q', -3)
    )
  / rulename--STRING(typenames) 1*WSP
    (
        type-declare--type(types)
      / to--fault('Illegal type annotation %q', typenames)
    )

custom =
  rulename--STRING(KEY) 1*WSP (
      string
    / '[' *WSP strings--ARRAY(VALUE) *WSP ']'
    / to--fault('Invalid custom configuration %q')
  )

or = 1*c-wsp '/' 1*c-wsp

strings = string *(or string)

string =
  "'" *quotes-vchar--STRING(VALUE, unescape) "'"

quotes-vchar =
    %x20-21 / %x23-26 / %x28 / %x2A-5B / %x5D-7E
  / '\' (
      '"' /          ; quotation mark  U+0022
      "'" /          ; quotation mark  U+0027
      '\' /          ; reverse solidus U+005C
      'x' 2HEXDIG /  ; xXX             U+XX
      'u' (          ; uXXXX           U+XXXXXX
        '{' 1*6HEXDIG '}' /
        4HEXDIG
      )
    )

infix =
  '(' c-wsp
    'node'      1*WSP "'" 1*ALPHA--STRING(node) "'" 1*c-wsp
    'left'      1*WSP "'" 1*ALPHA--STRING(left) "'" 1*c-wsp
    'operator'  1*WSP "'" 1*ALPHA--STRING(operator) "'" 1*c-wsp
    'right'     1*WSP "'" 1*ALPHA--STRING(right) "'" 1*c-wsp
    'priority'  1*WSP
      '[' *c-wsp
        infixes--ARRAY(priority)
        *(1*c-wsp infixes--ARRAY(priority))
      *c-wsp ']'
  c-wsp ')'

infixes =
  '[' *c-wsp string *(or string) *c-wsp ']'

type-declare =
  '(' 1*(1*c-wsp field-declare--PROPERTY(fields)) 1*c-wsp ')'
                                    to--STRING(kind, struct)
  / type-annotation

field-declare =
  rulename--STRING(KEY) 1*WSP (
      field-annotation--field(VALUE)
    / to--fault('Invalid type-annotation on field %s', KEY)
  )

type-annotation =
    'array'     [annotation]      to--STRING(kind, array)
  / 'unique'    [annotation]      to--STRING(kind, unique)
  / 'object'    [annotation]      to--STRING(kind, object)
  / 'map'       [annotation]      to--STRING(kind, map)
  / 'embedded'  [annotation]      to--STRING(kind, embedded)
  / 'null'      annotation        to--STRING(kind, null)
  / 'mixins'                      to--STRING(kind, mixins)
  / annotation                    to--STRING(kind, type)

field-annotation =
    type-annotation
  / '%d' 1*DIGIT--STRING(value)   to--STRING(kind, int)
  / "'" *quotes-vchar--STRING(value, unescape) "'"
                                  to--STRING(kind, string)
  / bool-val--STRING(value)       to--STRING(kind, bool)

bool-val = 'true' / 'false'

annotation =
  '<'
    rulename--STRING(annotation)
    *(',' [SP] rulename--STRING(annotation))
  '>'

rulename    = ALPHA *(['-'] (ALPHA / DIGIT ))

defined-as  = *c-wsp '=' *c-wsp

c-wsp       = WSP / c-nl WSP

c-nl        = [comment--comment(/comments)] 1*to--eol
                ; comment or newline

comment     = ';' comment-val--STRING(value)
comment-val = *(WSP / VCHAR)

rulelist = rule *( *WSP c-nl [rule] )

rule =
  rulename--STRING(formnames) defined-as
  alternation--pending(formulas)

alternation =
  concatenation--pending(factor) (
      1*(or concatenation--pending(factor))
      to--true(choice) to--type(list)
    / to--discard
  )

concatenation =
  repetition--pending(factor) (
    1*(1*c-wsp repetition--pending(factor)) to--type(list)
    / to--discard
  )

repetition = option / [repeat--repeat(repeat)] (group / element)

repeat =
    '*' to--INT(min,0) (1*DIGIT--INT(max) / to--INT(max,1))
  / 1*DIGIT--INT(min) (
        '*' ( 1*DIGIT--INT(max) / to--INT(max, -1) )
      / to--copy(min, max)
    )

element =
    num-val
  / char-val to--type(string)
  / action to--type(action)

option =
  '[' *c-wsp (
      element *c-wsp ']'
    / alternation--pending(factor) *c-wsp ']' to--type(list)
  ) to--INT(min,0)

group =
  '(' *c-wsp alternation--pending(factor) *c-wsp ')' to--type(list)

action =
  rulename--STRING(refer) ['--' (
      1*ALPHA--STRING(name) [
        '(' *SP argument *(*SP ',' *SP argument ) *SP ')'
      ]
    / to--fault('Invalid arguments of %s', refer)
  )]

argument =
    "'" *quotes-vchar--STRING(factor, unescape) "'"
  / int-val--INT(factor)
  / 1*safe-vchar--STRING(factor)
  / to--fault('Invalid arguments on %s', refer)

int-val = ['-'] 1*DIGIT
safe-vchar = ALPHA / DIGIT / '-'

char-val =
    "'" 1*ex27--STRING(value) "'"
  / '"' 1*ex22--STRING(value) '"' to--false(sensitive)

ex22 = %x20-21 / %x23-7E
ex27 = %x20-26 / %x28-7E

num-val =
  '%' (
      'x' hex-val to--type(codes)
    / 'b' 1*53BIT--STRING(value) to--type(bits)
    / to--fault('Unsupport formula %q', -1)
  )

hex-val =
  1*HEXDIG--RUNE(value,16) (
      '-' 1*HEXDIG--RUNE(value,16) to--true(isRange)
    / *('.' 1*HEXDIG--RUNE(value,16))
  )

ALPHA   = %x61-7A / %x41-5A

BIT     = %x30-31

DIGIT   = %x30-39 ; 0-9

HEXDIG  = DIGIT / %x41-46

SP      = %x20

WSP     = %x20 / %x09 ; space and horizontal tab

VCHAR   = %x21-7E ; visible (printing) characters