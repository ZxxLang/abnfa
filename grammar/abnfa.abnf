; ABNFA Definition of ABNF extended quote-string

rules       = 1*(
                WSPS /
                Comment /
                NL /
                plugins--plugins- /
                tokenize--tokenize- /
                Rule-value-defs-
              )

PLUGINS     = NL SET FAIL TOINT

TOKENIZE    = WSPS / NL /
              '=' / '/' / '[' / ']' / '(' / ')' / '*' /
              <'> qstring (<'> / FAIL-expected-quote) /
              '"' dstring ('"' / FAIL-expected-double-quote) /
              '<' prose ('>' / FAIL-expected-closeing-angle-brackets) /
              '%' (
                'b' bin [
                  '-' (bin / FAIL-expected-bin) /
                  1*('.' (bin / FAIL-expected-bin))
                ] /
                'd' dec [
                  '-' (dec / FAIL-expected-dec)  /
                  1*('.' (dec / FAIL-expected-dec) )
                ] /
                'x' hex [
                  '-' (hex / FAIL-expected-hex) /
                  1*('.' (hex / FAIL-expected-hex))
                ] /
                FAIL-expected-bin-or-dec-or-hex
              ) /
              name / action / comment / dec /
              FAIL-unrecognized-token

WSPS        = 1*(SP / HTAB)

comment     = ';' *(SP / HTAB / VCHAR)

name        = ALPHA *(ALPHA / DIGIT)

action      = 1*('-' *('-' / ALPHA / DIGIT))

qstring     = 1*(%x20-26 / %x28-7E) / FAIL-invalid-quote-string
dstring     = 1*(%x20-21 / %x23-7E) / FAIL-invalid-double-quote-string
prose       = 1*(%x20-3D / %x3F-7E) / FAIL-invalid-prose

bin         = 1*BIT
dec         = 1*DIGIT
hex         = 1*HEXDIG

;;; middle rule

cwsp        = [WSPS] [Comment] *(1*NL WSPS [Comment])

Comment     = comment-push-comments-Comment

plugins     = 'PLUGINS' (
                [WSPS] '=' 1*(cwsp Plugin-) cwsp /
                FAIL-invalid-plugin
              )

Plugin      = name-key [action--action]

tokenize    = 'TOKENIZE' [WSPS] '=' cwsp Choice cwsp

repeat      = (
                dec--min '*' (dec--max / SET-max--1) /
                '*' SET-min-0 (dec--max / SET-max--1) /
                dec--min SET-max-0
              )

              TOINT-10-max-min

Rule        = name-key [WSPS] '=' cwsp Choice cwsp

Choice      = serials *('/' cwsp serials)

serials     = 1*(Serial-push-seqs- cwsp)

Serial      = '[' cwsp Choice-push-seqs- cwsp ']' /
              [repeat] '(' cwsp Choice-push-seqs- cwsp ')' /
              Text-push-seqs- /
              Binary-push-seqs- /
              Action-push-seqs-

Text        = [repeat] <'> qstring--raw SET-sensitive <'> /
              [repeat] '"' dstring--raw '"' /
              [repeat] '<' prose--raw SET-sensitive '>'

Binary      = [repeat]  '%' (
                'b' (
                  bin--first '-' bin--last SET-role-R
                    TOINT-2-last-first /
                  bin-push-fields 1*('.' bin-push-fields) SET-role-S
                    TOINT-2-fields /
                  bin--value SET-role-B
                    TOINT-2-value
                )  /
                'd' (
                  dec--first '-' dec--last SET-role-R
                    TOINT-10-last-first /
                  dec-push-fields 1*('.' dec-push-fields) SET-role-S
                    TOINT-10-fields /
                  dec--value SET-role-B
                    TOINT-10-value
                ) /
                'x' (
                  hex--first '-' hex--last SET-role-R
                    TOINT-16-last-first /
                  hex-push-fields 1*('.' hex-push-fields) SET-role-S
                    TOINT-16-fields /
                  hex--value SET-role-B
                    TOINT-16-value
                ) /
                FAIL-invalid-binary-formal
              )

Action      = [repeat] name--ref [action--action]


; Core Rules

A2Z     = %x41-5A
a2z     = %x61-7A

ALPHA   = a2z / A2Z

BIT     = %x30-31

DIGIT   = %x30-39 ; 0-9

HEXDIG  = DIGIT / a2f / A2F
a2f     = %x61-66
A2F     = %x41-46

SP      = %x20

HTAB    = %x09

VCHAR   = %x21-7E
